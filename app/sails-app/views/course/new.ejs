

<style>
  .option {
    position: absolute;
    top: 1.5rem;
    right: 3rem
  }
  .card {
    position: relative!important
  }
  .card-footer {
    padding: 2rem!important;
    padding-top: 1rem!important;
    padding-bottom: 0rem!important;
  }
  .mode-delete {
    padding: 2rem;
    border-left: 5px solid #fa6969;
  }
  .create-form {
    margin-bottom: 2rem!important;
    max-width: 600px!important;
    position: relative!important;
  }
  .mode-un-updated {
    border-left: 5px solid #f7d358;
  }
</style>


<div id="app"></div>





<script type="text/javascript">
  const e = React.createElement;
  const c = React.createClass;
  var card = c({
    getInitialState: function() {
      return {
        mode: 'view',
        loading: false,
        name: this.props.name,
        contact: this.props.contact,
        instructor: this.props.instructor,
        credits: this.props.credits
      };
    },
    editMode: function() {
      this.setState({mode: 'edit'});
    },
    viewMode: function() {
      this.setState({mode: 'view'});
    },
    handleInputName: function(e) {
      this.setState({name: e.target.value})
    },
    handleInputContact: function(e) {
      this.setState({contact: e.target.value})
    },
    handleInputInstructor: function(e) {
      this.setState({instructor: e.target.value})
    },
    handleInputCredits: function(e) {
      this.setState({credits: e.target.value})
    },
    postEdit: function() {
      var data = {
        name: this.state.name,
        instructor: this.state.instructor,
        credits: this.state.credits,
        contact: this.state.contact
      }
      var t = this;
      t.setState({loading: true});
      axios.post('/course/update/' + t.props.id, data)
      .then(function(res) {
        if (res.data.error) {
          alert('Unexpected error.' + JSON.stringify(res.data.error));
          t.setState({loading: false, mode: 'unUpdated'});
        } else {
          t.setState({loading: false, mode: 'view'});
        }
      })
      .catch(function (e) {
        alert('Unexpected error.' + e);
      });
    },
    delete: function() {
      var x = window.confirm('Are you sure?');
      if (!x) return;
      var t = this;
      t.setState({loading: true});
      axios.post('/course/delete/' + t.props.id, {})
      .then(function(res) {
        if (res.data.error) {alert('Unexpected error.' + res.data.error); return;}
        if (res.error) {alert('Unexpected error.' + res.error); return;}
        t.setState({loading: false, mode: 'deleted'});
      })
      .catch(function (e) {
        alert('Unexpected error.' + e);
      });
    },
    render: function() {
      var content = ''
      if (this.state.mode == 'view' || this.state.mode == 'unUpdated') {
        content = e('div', {className: this.state.mode == 'unUpdated' ? 'mode-un-updated' : 'mode-view'},
          e('p', {className: 'card-body'},
          e('b', null, 'Name'), ': ' + this.state.name, e('br', null),
          e('b', null, 'Instructor'), ': ' + this.state.instructor, e('br', null),
          e('b', null, 'Credits'), ': ' + this.state.credits, e('br', null),
          e('b', null, 'Contact'), ': ' + this.state.contact
          ),
          e('div', {className: 'card-footer row'},
            e('div', {className: 'col left'}, e('a', {onClick: this.editMode}, 'Edit')),
            e('div', {className: 'col right'}, e('a', {onClick: this.delete}, 'Delete'))
          )
        )
      } else if (this.state.mode == 'edit') {
        content = e('div', {className: 'mode-edit'},
          e('p', {className: 'card-body'},
          e('a', {className: 'option', onClick: this.viewMode}, 'Exit'),
          e('input', {type: 'text', value: this.state.name, onChange: this.handleInputName}), e('br', null),
          e('input', {type: 'text', value: this.state.instructor, onChange: this.handleInputInstructor}), e('br', null),
          e('input', {type: 'text', value: this.state.credits, onChange: this.handleInputCredits}), e('br', null),
          e('input', {type: 'text', value: this.state.contact, onChange: this.handleInputContact})
          ),
          e('div', {className: 'card-footer'},
            e('button', {onClick: this.postEdit}, 'Update')
          )
        )
      } else if (this.state.mode == 'deleted') {
        content = e('div', {className: 'mode-delete'},
            'Deleted.'
        )
      } else {
        content = e('div', {className: 'mode-delete'},
            'There seeme to be some problem with the state.'
        )
      }
      return (
        e('div', {className: 'card'},
          (this.state.loading) ? e('div', {className: 'loading-div horizontal-align vertical-align'}, '') : '',
          e('h5', {className: 'card-header'}, this.props.code),
          content
        )
      )
    }
  })
  var cards = c({
    getInitialState: function() {
      return {
        data: this.props.data,
        loading: false,
        name: '',
        instructor: '',
        credits: '',
        contact: '',
        code: ''
      };
    },
    handleInputName: function(e) {
      this.setState({name: e.target.value})
    },
    handleInputContact: function(e) {
      this.setState({contact: e.target.value})
    },
    handleInputInstructor: function(e) {
      this.setState({instructor: e.target.value})
    },
    handleInputCredits: function(e) {
      this.setState({credits: e.target.value})
    },
    handleInputCode: function(e) {
      this.setState({code: e.target.value})
    },
    handleFormSubmit: function() {
      var data = {
        name: this.state.name,
        instructor: this.state.instructor,
        credits: this.state.credits,
        contact: this.state.contact,
        code: this.state.code
      }
      var t = this;
      t.setState({loading: true});
      axios.post('/course/create/', data)
      .then(function(res) {
        if (res.data.user) {
          t.setState({
            data: t.state.data.concat([res.data.user]),
            name: '',
            instructor: '',
            credits: '',
            contact: '',
            code: ''
          })
        } else {
          alert('Unexpected error. ' + JSON.stringify(res));
        }
        t.setState({loading: false});
      })
      .catch(function (e) {
        alert('Unexpected error.' + e);
      });
    },
    render: function() {
      var courses = this.state.data.concat([]).reverse().map(function(c) {
        return e(card, {
          key: c.id.toString(),
          code: c.code,
          name: c.name,
          instructor: c.instructor,
          credits: c.credits,
          contact: c.contact,
          id: c.id
        })
      })
      return (
        e('div', null,
          e('div', {className: 'create-form'},
            (this.state.loading) ? e('div', {className: 'loading-div horizontal-align vertical-align'}, 'Creating...') : '',
            e('input', {placeholder: 'Course name? eg. Machine Learning', type: 'text', value: this.state.name, onChange: this.handleInputName}), e('br', null),
            e('input', {placeholder: 'Course code? eg. CS4563', type: 'text', value: this.state.code, onChange: this.handleInputCode}), e('br', null),
            e('input', {placeholder: 'Instructor name? eg. Dr Sahely', type: 'text', value: this.state.instructor, onChange: this.handleInputInstructor}), e('br', null),
            e('input', {placeholder: 'Credits? eg. 8', type: 'text', value: this.state.credits, onChange: this.handleInputCredits}), e('br', null),
            e('input', {placeholder: 'Contact email? eg. john@doe.com or machine.learning@iitpkd.ac.in', type: 'text', value: this.state.contact, onChange: this.handleInputContact}),
            e('input', {type: 'submit', value: 'Create', onClick: this.handleFormSubmit})
          ),
          e('div', {className: 'cards'}, this.state.data.length > 0 ? courses : 'No courses yet!')
        )
      )
    }
  })

  ReactDOM.render(
    e(cards, {data: <% if (courses && courses.length > 0) { %> <%- JSON.stringify(courses) %> <% } else { %> [] <% } %>}),
    document.getElementById('app')
  );
</script>
